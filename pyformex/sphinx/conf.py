# -*- coding: utf-8 -*-
##
##  SPDX-FileCopyrightText: Â© 2007-2023 Benedict Verhegghe <bverheg@gmail.com>
##  SPDX-License-Identifier: GPL-3.0-or-later
##
##  This file is part of pyFormex 3.3  (Sun Mar 26 20:16:15 CEST 2023)
##  pyFormex is a tool for generating, manipulating and transforming 3D
##  geometrical models by sequences of mathematical operations.
##  Home page: https://pyformex.org
##  Project page: https://savannah.nongnu.org/projects/pyformex/
##  Development: https://gitlab.com/bverheg/pyformex
##  Distributed under the GNU General Public License version 3 or later.
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see http://www.gnu.org/licenses/.
##

# pyFormex documentation build configuration file, created by
# sphinx-quickstart on Fri Aug 21 15:05:14 2009.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys
sys.path.insert(0, os.path.abspath('../../pyformex'))
sys.path.insert(0, os.path.abspath('../..'))
sys.path.append(os.path.abspath('exts'))

parentdir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
print("Parent dir: %s" % parentdir)
print("SYSPATH: %s" % sys.path)

import sphinx
from sphinx.util import logging
logger = logging.getLogger(__name__)

# -- Project information -----------------------------------------------------

project = 'pyFormex'
copyright = '2004-2023, Benedict Verhegghe'
author = 'Benedict Verhegghe'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '3.4'
# The full version, including alpha/beta/rc tags.
release = '3.4.dev0'

# -- Sphinx version -----------------------------------------------------

from distutils.version import LooseVersion as SaneVersion
# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = '1.7'
print(f"Sphinx version {sphinx.__version__}")

if sphinx.__version__ >= SaneVersion('3.0'):
    from mytoctree import MyTocTree
elif sphinx.__version__ >= SaneVersion('2.0'):
    raise RuntimeError(f"Not a workable Sphinx version: {sphinx.__version__}")
elif sphinx.__version__ >= SaneVersion('1.7'):
    from mytoctree_1_7 import MyTocTree
else:
    raise RuntimeError(f"Not a workable Sphinx version: {sphinx.__version__}")

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc', 'sphinx.ext.imgmath', 'sphinx.ext.autosummary',
    'sphinx.ext.intersphinx', 'sphinx.ext.napoleon', 'sphinx.ext.doctest',
    'sphinx.ext.viewcode',
    'sphinx_qt_documentation' ]

# Add both class and __init__ docstrings
autoclass_content = 'class'  # 'class', 'init' or 'both'

autodoc_member_order = 'bysource'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The master toctree document.
master_doc = 'index'   # required for v1.8

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# Napoleon settings
#napoleon_google_docstring = True
#napoleon_numpy_docstring = True
#napoleon_include_init_with_doc = False
#napoleon_include_private_with_doc = False
#napoleon_include_special_with_doc = True
#napoleon_use_admonition_for_examples = False
#napoleon_use_admonition_for_notes = False
#napoleon_use_admonition_for_references = False
#napoleon_use_ivar = False
#napoleon_use_param = True
napoleon_use_rtype = False

# intersphinx settings
intersphinx_mapping = {
    'blog': ('https://docs.python.org/3', None),
    'numpy': ('https://docs.scipy.org/doc/numpy', None),
    'PyQt5': ('https://www.riverbankcomputing.com/static/Docs/PyQt5', None),
#    'PyQt5': ('https://doc.qt.io/qt-5/', None),
#    'scipy': ('http://docs.scipy.org/doc/scipy/reference', None),
#    'matplotlib': ('http://matplotlib.sourceforge.net', None),
}

qt_documentation = "PySide2"

# linkcode config
def linkcode_resolve(domain, info):
    if domain != 'py':
        return None
    if not info['module']:
        return None
    filename = info['module'].replace('.', '/')
    return "file://%s/pyformex/%s.py" % (parentdir,filename)

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# e.g. sphinxdoc, see also https://sphinx-themes.org/
html_theme = 'pyformex'
# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['.']
html_theme_options = {
    "rightsidebar": "true",
#    "relbarbgcolor": "black",
#    "sidebarbgcolor": "silver",
}

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = 'favicon.ico'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_copy_source = False
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'pyFormexdoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
latex_paper_size = 'a4'

# The font size ('10pt', '11pt' or '12pt').
latex_font_size = '11pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'pyformex.tex', u'pyFormex Documentation',
   u'Benedict Verhegghe', 'manual', True),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
latex_logo = 'images/pyformex_logo_with_dome.png'

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = True

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


def list_toctree(app, doctree, docname):
    """Change the numbering of the  multiple toctrees in a document"""
    if docname == "refman":
        print(app.env.toc_num_entries)
        print(app.env.toc_secnumbers)
        numberedfrom = 0
        for node in doctree.traverse():
            #print node.tagname
            if node.tagname == 'title':
                print(node)
            if node.tagname == 'toctree':
                att = node.attributes
                print(att.keys())
                if att.get('numberedfrom',0) < 0:
                    att['numberedfrom'] = numberedfrom
                nentries = len(att['entries'])
                print(numberedfrom,nentries)
                numberedfrom += nentries
                print(att)


def setup(app):
    from sphinx.ext.autodoc import cut_lines
    app.connect("doctree-resolved", list_toctree)
    app.connect('autodoc-process-docstring', cut_lines(2, what=['module']))
##     app.connect('autodoc-skip-member', autodoc_skip_member1)


## def autodoc_skip_member1(app,what,name,obj,skip,options):
##     #from sphinx.ext.autodoc import autodoc_skip_member
##     print obj
##     print skip
##     if obj.__doc__ is not None:
##         skip |= obj.__doc__[0] == '_'
##     return skip


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'sometext', u'sometext Documentation',
     [u'we'], 1)
]

# End
